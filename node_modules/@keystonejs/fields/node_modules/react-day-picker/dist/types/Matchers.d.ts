/** A `Matcher` is a function, a date, an object, or an array of them used to determine if a day matches a modifier. */
export declare type Matcher = boolean | ((date: Date) => boolean) | Date | Date[] | DateRange | DateBefore | DateAfter | DateInterval | DayOfWeek;
/** A matcher to match a day falling after the specified date, with the date not included. */
export declare type DateAfter = {
    after: Date;
};
/** A matcher to match a day falling before the specified date, with the date not included. */
export declare type DateBefore = {
    before: Date;
};
/** A matcher to match a day falling before and after two dates, where the dates are not included. */
export declare type DateInterval = {
    before: Date;
    after: Date;
};
/** A matcher to match a range of dates. The range can be open. Differently from [[DateInterval]], the dates here are included. */
export declare type DateRange = {
    from: Date | undefined;
    to?: Date | undefined;
};
/** A matcher to match a date being one of the specified days of the week (`0-7`, where `0` is Sunday). */
export declare type DayOfWeek = {
    dayOfWeek: number[];
};
/** Returns true if `matcher` is of type [[DateInterval]]. */
export declare function isDateInterval(matcher: unknown): matcher is DateInterval;
/** Returns true if `value` is a [[DateRange]] type. */
export declare function isDateRange(value: unknown): value is DateRange;
/** Returns true if `value` is of type [[DateAfter]]. */
export declare function isDateAfterType(value: unknown): value is DateAfter;
/** Returns true if `value` is of type [[DateBefore]]. */
export declare function isDateBeforeType(value: unknown): value is DateBefore;
/** Returns true if `value` is a [[DayOfWeek]] type. */
export declare function isDayOfWeekType(value: unknown): value is DayOfWeek;
